Урок №1. Введение в Rx. Основные источники данных.

Библиотека RxJava построена на паттерне проектирования, который называется "Наблюдатель". Если говорить кратко, то
это паттерн, который содержит две сущности - Observable и observer, то есть наблюдатель и наблюдаемый. Observer
подписывается на Observable и следит за всеми изменениями, которые прихдят от Observable. Более подробно об этом 
паттерне можно прочитать в специализированной литературе, например, "Банда четырех".

В RxJava существуют 5 типов источников данных:

1. Observable

2. Maybe

3. Single

4. Completable

5. Flowable

Сначала поговорим про первый 4-е типа, а после этого поговорим о Flowable. Completable, Maybe, Single - это источники
данных, которые являются подмножеством Observable. Поэтому разумно будет разобраться сначала с Observable. А уже потом
начать разбор остальных типов.

1.OBSERVABLE

При подписке на Observable, могут приходит события 3ех типов:

1. onNext()
2. onCompleted()
3. onError()

Важно понимать, что onCompleted и onError являются терминальными состояниями. Если в подписчика придет одно из этих
событий, то эмитиинг данных от источника на этом закончится. А если придет onNext(), то мы может ожидать либо снова
onNext(), либо одно из терминальных состояний. Таким образом, работает Observable. Важно понимать, что по умолчанию
Observable и все остальные источники данных, являются "холодными", то есть данные не начнут эмититься до тех пор,
пока у источника данных не появиться хотя бы один подписчик. Чуть позже мы поговорим о "горячих" источниках данных.
И как преобразовать "холодный" в "горячий".

2. SINGLE

Single возвращает события двух типов, либо onSucces, либо onError. Эти события являются терминальными.Этот 
источник отлично подходит для работы с сетевыми запросами.

3. MAYBE
Maybe возвращает событие трех типов либо onSucces(), либо onError(), либо onComplete(). Каждый из этих событий
является терминальным, поэтому он в это смысле похож на Single, потому что вызывается только один раз.

4. COMPLETABLE
Completable возвращает событие 2 типов либо onCompletable(), либо onError(). Каждый из этих событий
является терминальным.

5. FLOWABLE
Flowable - это Observable, который поддерживает работу с Backpressure. Backpressure - это ситуция, при которой
подписчик не успевает обрабатывать данные, которые испускает источник. Для обработки Backpressure.Flowable содержит
различные стратегии обработки ошибок в enum'е BackpressureStrategу, который содержит 5 стратегий обработки ошибок:
1. MISSING
2. ERROR
3. DROP 
4. LATEST
5. BUFFER

